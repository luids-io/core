// Code generated by protoc-gen-go. DO NOT EDIT.
// source: resolv.proto

package dnsutilpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ResolvCollectRequest struct {
	ClientIp             string   `protobuf:"bytes,1,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ResolvedIps          []string `protobuf:"bytes,3,rep,name=resolved_ips,json=resolvedIps,proto3" json:"resolved_ips,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResolvCollectRequest) Reset()         { *m = ResolvCollectRequest{} }
func (m *ResolvCollectRequest) String() string { return proto.CompactTextString(m) }
func (*ResolvCollectRequest) ProtoMessage()    {}
func (*ResolvCollectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_993e7e3c415ddf0b, []int{0}
}

func (m *ResolvCollectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResolvCollectRequest.Unmarshal(m, b)
}
func (m *ResolvCollectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResolvCollectRequest.Marshal(b, m, deterministic)
}
func (m *ResolvCollectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolvCollectRequest.Merge(m, src)
}
func (m *ResolvCollectRequest) XXX_Size() int {
	return xxx_messageInfo_ResolvCollectRequest.Size(m)
}
func (m *ResolvCollectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolvCollectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResolvCollectRequest proto.InternalMessageInfo

func (m *ResolvCollectRequest) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

func (m *ResolvCollectRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ResolvCollectRequest) GetResolvedIps() []string {
	if m != nil {
		return m.ResolvedIps
	}
	return nil
}

type ResolvCheckRequest struct {
	ClientIp             string   `protobuf:"bytes,1,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	ResolvedIp           string   `protobuf:"bytes,2,opt,name=resolved_ip,json=resolvedIp,proto3" json:"resolved_ip,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResolvCheckRequest) Reset()         { *m = ResolvCheckRequest{} }
func (m *ResolvCheckRequest) String() string { return proto.CompactTextString(m) }
func (*ResolvCheckRequest) ProtoMessage()    {}
func (*ResolvCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_993e7e3c415ddf0b, []int{1}
}

func (m *ResolvCheckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResolvCheckRequest.Unmarshal(m, b)
}
func (m *ResolvCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResolvCheckRequest.Marshal(b, m, deterministic)
}
func (m *ResolvCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolvCheckRequest.Merge(m, src)
}
func (m *ResolvCheckRequest) XXX_Size() int {
	return xxx_messageInfo_ResolvCheckRequest.Size(m)
}
func (m *ResolvCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolvCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResolvCheckRequest proto.InternalMessageInfo

func (m *ResolvCheckRequest) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

func (m *ResolvCheckRequest) GetResolvedIp() string {
	if m != nil {
		return m.ResolvedIp
	}
	return ""
}

func (m *ResolvCheckRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ResolvCheckResponse struct {
	Result               bool                 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	LastTs               *timestamp.Timestamp `protobuf:"bytes,2,opt,name=last_ts,json=lastTs,proto3" json:"last_ts,omitempty"`
	StoreTs              *timestamp.Timestamp `protobuf:"bytes,3,opt,name=store_ts,json=storeTs,proto3" json:"store_ts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ResolvCheckResponse) Reset()         { *m = ResolvCheckResponse{} }
func (m *ResolvCheckResponse) String() string { return proto.CompactTextString(m) }
func (*ResolvCheckResponse) ProtoMessage()    {}
func (*ResolvCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_993e7e3c415ddf0b, []int{2}
}

func (m *ResolvCheckResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResolvCheckResponse.Unmarshal(m, b)
}
func (m *ResolvCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResolvCheckResponse.Marshal(b, m, deterministic)
}
func (m *ResolvCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolvCheckResponse.Merge(m, src)
}
func (m *ResolvCheckResponse) XXX_Size() int {
	return xxx_messageInfo_ResolvCheckResponse.Size(m)
}
func (m *ResolvCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolvCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResolvCheckResponse proto.InternalMessageInfo

func (m *ResolvCheckResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *ResolvCheckResponse) GetLastTs() *timestamp.Timestamp {
	if m != nil {
		return m.LastTs
	}
	return nil
}

func (m *ResolvCheckResponse) GetStoreTs() *timestamp.Timestamp {
	if m != nil {
		return m.StoreTs
	}
	return nil
}

func init() {
	proto.RegisterType((*ResolvCollectRequest)(nil), "luids.dnsutil.v1.ResolvCollectRequest")
	proto.RegisterType((*ResolvCheckRequest)(nil), "luids.dnsutil.v1.ResolvCheckRequest")
	proto.RegisterType((*ResolvCheckResponse)(nil), "luids.dnsutil.v1.ResolvCheckResponse")
}

func init() { proto.RegisterFile("resolv.proto", fileDescriptor_993e7e3c415ddf0b) }

var fileDescriptor_993e7e3c415ddf0b = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x6b, 0xdb, 0x40,
	0x10, 0xb5, 0xab, 0xd6, 0x1f, 0xab, 0x16, 0xca, 0xb6, 0x18, 0xa3, 0x1e, 0xea, 0x8a, 0x26, 0x18,
	0x82, 0x57, 0xc4, 0x26, 0xa7, 0xdc, 0x12, 0x72, 0x30, 0xb9, 0x09, 0x93, 0x43, 0x08, 0x18, 0x49,
	0x1e, 0xcb, 0x9b, 0xac, 0xb4, 0x1b, 0xcd, 0xca, 0xe0, 0x9f, 0x92, 0x7f, 0x1b, 0xbc, 0x92, 0x62,
	0x39, 0x1f, 0x38, 0x17, 0x31, 0x1a, 0xe6, 0xbd, 0x37, 0xfb, 0xe6, 0x91, 0xef, 0x19, 0xa0, 0x14,
	0x6b, 0xa6, 0x32, 0xa9, 0x25, 0xfd, 0x29, 0x72, 0xbe, 0x40, 0xb6, 0x48, 0x31, 0xd7, 0x5c, 0xb0,
	0xf5, 0xa9, 0x33, 0x89, 0xb9, 0x5e, 0xe5, 0x21, 0x8b, 0x64, 0xe2, 0xc5, 0x52, 0x04, 0x69, 0xec,
	0x99, 0xd1, 0x30, 0x5f, 0x7a, 0x4a, 0x6f, 0x14, 0xa0, 0x07, 0x89, 0xd2, 0x9b, 0xe2, 0x5b, 0xd0,
	0x38, 0xe7, 0x87, 0x41, 0x9a, 0x27, 0x80, 0x3a, 0x48, 0xd4, 0xae, 0x2a, 0xc0, 0xee, 0x3d, 0xf9,
	0xed, 0x9b, 0x9d, 0x2e, 0xa5, 0x10, 0x10, 0x69, 0x1f, 0x1e, 0x73, 0x40, 0x4d, 0xff, 0x90, 0x6e,
	0x24, 0x38, 0xa4, 0x7a, 0xce, 0x55, 0xbf, 0x39, 0x68, 0x0e, 0xbb, 0x7e, 0xa7, 0x68, 0x4c, 0x15,
	0xa5, 0xe4, 0x6b, 0x1a, 0x24, 0xd0, 0xff, 0x62, 0xfa, 0xa6, 0xa6, 0xff, 0xaa, 0xc7, 0xc1, 0x62,
	0xce, 0x15, 0xf6, 0xad, 0x81, 0x35, 0xec, 0xfa, 0x76, 0xd5, 0x9b, 0x2a, 0x74, 0x97, 0x84, 0x96,
	0x5a, 0x2b, 0x88, 0x1e, 0x3e, 0xa5, 0xf4, 0x97, 0xd8, 0x35, 0xd6, 0x52, 0x90, 0xec, 0x48, 0x5f,
	0x56, 0xb1, 0x76, 0xab, 0xb8, 0x4f, 0x4d, 0xf2, 0x6b, 0x4f, 0x08, 0x95, 0x4c, 0x11, 0x68, 0x8f,
	0xb4, 0x32, 0xc0, 0x5c, 0x68, 0x23, 0xd3, 0xf1, 0xcb, 0x3f, 0x3a, 0x21, 0x6d, 0x11, 0xa0, 0x9e,
	0x6b, 0x34, 0x02, 0xf6, 0xd8, 0x61, 0xb1, 0x94, 0xb1, 0x00, 0x56, 0xf9, 0xc8, 0x66, 0x95, 0x6d,
	0x7e, 0x6b, 0x3b, 0x3a, 0x43, 0x7a, 0x46, 0x3a, 0xa8, 0x65, 0x06, 0x5b, 0x94, 0x75, 0x10, 0xd5,
	0x36, 0xb3, 0x33, 0x1c, 0xdf, 0x91, 0x1f, 0x7b, 0x7e, 0xd3, 0x6b, 0xd2, 0xae, 0xca, 0x63, 0xf6,
	0x3a, 0x10, 0xec, 0xbd, 0xdb, 0x38, 0xbd, 0x37, 0x42, 0x57, 0xdb, 0x38, 0xb8, 0x8d, 0x31, 0x10,
	0xbb, 0xf6, 0x70, 0x7a, 0x43, 0xbe, 0x15, 0xc5, 0xff, 0x0f, 0x99, 0x6b, 0x97, 0x70, 0x8e, 0x0e,
	0x4c, 0x15, 0x36, 0xba, 0x8d, 0x8b, 0xd1, 0xed, 0x49, 0x2d, 0x73, 0x06, 0x34, 0xe2, 0xd2, 0x8b,
	0x64, 0x06, 0x45, 0xf4, 0x62, 0x48, 0xbd, 0x92, 0x45, 0x85, 0x61, 0xcb, 0xf4, 0x26, 0xcf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xa4, 0x83, 0x92, 0xd8, 0xfe, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ResolvCollectClient is the client API for ResolvCollect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ResolvCollectClient interface {
	Collect(ctx context.Context, in *ResolvCollectRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type resolvCollectClient struct {
	cc *grpc.ClientConn
}

func NewResolvCollectClient(cc *grpc.ClientConn) ResolvCollectClient {
	return &resolvCollectClient{cc}
}

func (c *resolvCollectClient) Collect(ctx context.Context, in *ResolvCollectRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/luids.dnsutil.v1.ResolvCollect/Collect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResolvCollectServer is the server API for ResolvCollect service.
type ResolvCollectServer interface {
	Collect(context.Context, *ResolvCollectRequest) (*empty.Empty, error)
}

// UnimplementedResolvCollectServer can be embedded to have forward compatible implementations.
type UnimplementedResolvCollectServer struct {
}

func (*UnimplementedResolvCollectServer) Collect(ctx context.Context, req *ResolvCollectRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collect not implemented")
}

func RegisterResolvCollectServer(s *grpc.Server, srv ResolvCollectServer) {
	s.RegisterService(&_ResolvCollect_serviceDesc, srv)
}

func _ResolvCollect_Collect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolvCollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResolvCollectServer).Collect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luids.dnsutil.v1.ResolvCollect/Collect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResolvCollectServer).Collect(ctx, req.(*ResolvCollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResolvCollect_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luids.dnsutil.v1.ResolvCollect",
	HandlerType: (*ResolvCollectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Collect",
			Handler:    _ResolvCollect_Collect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resolv.proto",
}

// ResolvCheckClient is the client API for ResolvCheck service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ResolvCheckClient interface {
	Check(ctx context.Context, in *ResolvCheckRequest, opts ...grpc.CallOption) (*ResolvCheckResponse, error)
}

type resolvCheckClient struct {
	cc *grpc.ClientConn
}

func NewResolvCheckClient(cc *grpc.ClientConn) ResolvCheckClient {
	return &resolvCheckClient{cc}
}

func (c *resolvCheckClient) Check(ctx context.Context, in *ResolvCheckRequest, opts ...grpc.CallOption) (*ResolvCheckResponse, error) {
	out := new(ResolvCheckResponse)
	err := c.cc.Invoke(ctx, "/luids.dnsutil.v1.ResolvCheck/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResolvCheckServer is the server API for ResolvCheck service.
type ResolvCheckServer interface {
	Check(context.Context, *ResolvCheckRequest) (*ResolvCheckResponse, error)
}

// UnimplementedResolvCheckServer can be embedded to have forward compatible implementations.
type UnimplementedResolvCheckServer struct {
}

func (*UnimplementedResolvCheckServer) Check(ctx context.Context, req *ResolvCheckRequest) (*ResolvCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}

func RegisterResolvCheckServer(s *grpc.Server, srv ResolvCheckServer) {
	s.RegisterService(&_ResolvCheck_serviceDesc, srv)
}

func _ResolvCheck_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolvCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResolvCheckServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luids.dnsutil.v1.ResolvCheck/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResolvCheckServer).Check(ctx, req.(*ResolvCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResolvCheck_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luids.dnsutil.v1.ResolvCheck",
	HandlerType: (*ResolvCheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _ResolvCheck_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resolv.proto",
}
